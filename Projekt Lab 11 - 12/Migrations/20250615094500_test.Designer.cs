// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projekt_Lab_11___12.Data;

#nullable disable

namespace Projekt_Lab_11___12.Migrations
{
    [DbContext(typeof(Projekt_Lab_11___12Context))]
    [Migration("20250615094500_test")]
    partial class test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PickaxeUser", b =>
                {
                    b.Property<int>("PickaxesEqId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PickaxesEqId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserPickaxes", (string)null);
                });

            modelBuilder.Entity("Projekt_Lab_11___12.Models.Entities.LevelRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MineResourceType")
                        .HasColumnType("int");

                    b.Property<int>("ResourceType")
                        .HasColumnType("int");

                    b.Property<int>("ResourceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LevelRequirements");
                });

            modelBuilder.Entity("Projekt_Lab_11___12.Models.Entities.Mine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MineResourceType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PermAdditionalValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Mines");

                    b.HasDiscriminator().HasValue("Mine");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Projekt_Lab_11___12.Models.Entities.Pickaxe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequirmentLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Pickaxes");
                });

            modelBuilder.Entity("Projekt_Lab_11___12.Models.Entities.PickaxeResourceMultiplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PickaxeId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceType")
                        .HasColumnType("int");

                    b.Property<int>("ResourceTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PickaxeId");

                    b.ToTable("PickaxeResourceMultipliers");
                });

            modelBuilder.Entity("Projekt_Lab_11___12.Models.Entities.PickaxeShop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PickaxeId")
                        .HasColumnType("int");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PickaxeId");

                    b.HasIndex("ShopId");

                    b.ToTable("PickaxeShops");
                });

            modelBuilder.Entity("Projekt_Lab_11___12.Models.Entities.PickaxeShopResourceCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PickaxeShopId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceType")
                        .HasColumnType("int");

                    b.Property<int>("ResourceTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PickaxeShopId");

                    b.ToTable("PickaxeShopResourceCosts");
                });

            modelBuilder.Entity("Projekt_Lab_11___12.Models.Entities.PointForClick", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("ResourceType")
                        .HasColumnType("int");

                    b.Property<int>("ResourceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PointForClicks");
                });

            modelBuilder.Entity("Projekt_Lab_11___12.Models.Entities.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Projekt_Lab_11___12.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Diamond")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DiamondMineId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<double>("Emerald")
                        .HasColumnType("float");

                    b.Property<decimal>("Gold")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("GoldMineId")
                        .HasColumnType("int");

                    b.Property<decimal>("Iron")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("IronMineId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("UsedPickaxeId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DiamondMineId");

                    b.HasIndex("GoldMineId");

                    b.HasIndex("IronMineId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UsedPickaxeId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Projekt_Lab_11___12.Models.Entities.DiamondMine", b =>
                {
                    b.HasBaseType("Projekt_Lab_11___12.Models.Entities.Mine");

                    b.HasDiscriminator().HasValue("DiamondMine");
                });

            modelBuilder.Entity("Projekt_Lab_11___12.Models.Entities.GoldMine", b =>
                {
                    b.HasBaseType("Projekt_Lab_11___12.Models.Entities.Mine");

                    b.HasDiscriminator().HasValue("GoldMine");
                });

            modelBuilder.Entity("Projekt_Lab_11___12.Models.Entities.IronMine", b =>
                {
                    b.HasBaseType("Projekt_Lab_11___12.Models.Entities.Mine");

                    b.HasDiscriminator().HasValue("IronMine");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Projekt_Lab_11___12.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Projekt_Lab_11___12.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projekt_Lab_11___12.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Projekt_Lab_11___12.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PickaxeUser", b =>
                {
                    b.HasOne("Projekt_Lab_11___12.Models.Entities.Pickaxe", null)
                        .WithMany()
                        .HasForeignKey("PickaxesEqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projekt_Lab_11___12.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Projekt_Lab_11___12.Models.Entities.PickaxeResourceMultiplier", b =>
                {
                    b.HasOne("Projekt_Lab_11___12.Models.Entities.Pickaxe", "Pickaxe")
                        .WithMany("PickaxeResourceMultipliers")
                        .HasForeignKey("PickaxeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pickaxe");
                });

            modelBuilder.Entity("Projekt_Lab_11___12.Models.Entities.PickaxeShop", b =>
                {
                    b.HasOne("Projekt_Lab_11___12.Models.Entities.Pickaxe", "Pickaxe")
                        .WithMany()
                        .HasForeignKey("PickaxeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projekt_Lab_11___12.Models.Entities.Shop", null)
                        .WithMany("PickaxeShops")
                        .HasForeignKey("ShopId");

                    b.Navigation("Pickaxe");
                });

            modelBuilder.Entity("Projekt_Lab_11___12.Models.Entities.PickaxeShopResourceCost", b =>
                {
                    b.HasOne("Projekt_Lab_11___12.Models.Entities.PickaxeShop", "PickaxeShop")
                        .WithMany("PickaxeShopResourceCosts")
                        .HasForeignKey("PickaxeShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PickaxeShop");
                });

            modelBuilder.Entity("Projekt_Lab_11___12.Models.Entities.User", b =>
                {
                    b.HasOne("Projekt_Lab_11___12.Models.Entities.DiamondMine", "DiamondMine")
                        .WithMany()
                        .HasForeignKey("DiamondMineId");

                    b.HasOne("Projekt_Lab_11___12.Models.Entities.GoldMine", "GoldMine")
                        .WithMany()
                        .HasForeignKey("GoldMineId");

                    b.HasOne("Projekt_Lab_11___12.Models.Entities.IronMine", "IronMine")
                        .WithMany()
                        .HasForeignKey("IronMineId");

                    b.HasOne("Projekt_Lab_11___12.Models.Entities.Pickaxe", "UsedPickaxe")
                        .WithMany()
                        .HasForeignKey("UsedPickaxeId");

                    b.Navigation("DiamondMine");

                    b.Navigation("GoldMine");

                    b.Navigation("IronMine");

                    b.Navigation("UsedPickaxe");
                });

            modelBuilder.Entity("Projekt_Lab_11___12.Models.Entities.Pickaxe", b =>
                {
                    b.Navigation("PickaxeResourceMultipliers");
                });

            modelBuilder.Entity("Projekt_Lab_11___12.Models.Entities.PickaxeShop", b =>
                {
                    b.Navigation("PickaxeShopResourceCosts");
                });

            modelBuilder.Entity("Projekt_Lab_11___12.Models.Entities.Shop", b =>
                {
                    b.Navigation("PickaxeShops");
                });
#pragma warning restore 612, 618
        }
    }
}
