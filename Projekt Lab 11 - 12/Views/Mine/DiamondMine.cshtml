@model Projekt_Lab_11___12.Models.ViewModels.MineViewModel

@{
    ViewData["Title"] = "Kopalnia Diamentów";
}

@section Styles {
    <link rel="stylesheet" href="~/css/mine-site.css" />
}

@Html.AntiForgeryToken()

<div class="mine-container">
    <div class="navbar">
        <a asp-controller="Mine" asp-action="IronMine" class="navbar-link">
            <img src="~/img/iron-mine.png" />
        </a>
        <a asp-controller="Mine" asp-action="GoldMine" class="navbar-link">
            <img src="~/img/gold-mine.png" />
        </a>
        <a asp-controller="Mine" asp-action="DiamondMine" class="navbar-link">
            <img src="~/img/diamond-mine.png" />
        </a>
        <a asp-controller="Store" asp-action="Index" class="navbar-link">
            <img src="~/img/store.png" />
        </a>
        <a asp-controller="Equipment" asp-action="Index" class="navbar-link">
            <img src="~/img/pickaxe/pickaxe-0.png" />
        </a>
        <a asp-controller="Upgrade" asp-action="Index" class="navbar-link">
            <img src="~/img/upgrade.png" />
        </a>
        <a asp-controller="Ranking" asp-action="Index" class="navbar-link">
            <img src="~/img/ranking.png" />
        </a>
        @if (User.IsInRole("Admin"))
        {
            <a asp-controller="Admin" asp-action="Index" class="navbar-link">
                <img src="~/img/admin.png" />
            </a>
        }
        <form asp-area="Identity" asp-page="/Account/Logout" method="post" class="navbar-link">
            <button type="submit">
                <img src="~/img/logout.png" alt="Logout" />
            </button>
        </form>
    </div>

    <div class="content">
        <div class="player-info">
            <div class="resources">
                @if (Model != null)
                {
                    <span id="iron-count">@Model.Iron.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)</span> <img src="~/img/iron.png" />
                    <span id="gold-count">@Model.Gold.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)</span> <img src="~/img/gold.png" />
                    <span id="diamond-count">@Model.Diamond.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)</span> <img src="~/img/diamond.png" />
                    <span id="diamond-count">@Model.Emerald.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)</span> <img src="~/img/emerald.png" />
                }
            </div>
        </div>

        <div id="mine" style="position: relative;">
            <img id="mineclick" src="~/img/mine-1.jpg" style="width: 100%;" />
            <div id="minecart">
                <div class="progress-bar">
                    <div class="progress-fill"
                         data-current="@Model.DiamondMine.BonusClicks.CurrentClicks"
                         data-max="@Model.DiamondMine.BonusClicks.MaxClicks"
                          style="width: @( (int)(((double)Model.DiamondMine.BonusClicks.CurrentClicks / Model.DiamondMine.BonusClicks.MaxClicks) * 100) )%;"></div>
                </div>
                <img id="minecartclick" src="~/img/minecart.png" />
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        let diamondCount = parseFloat(document.getElementById('diamond-count').textContent);

        document.getElementById("mineclick").addEventListener("click", async function (e) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            const response = await fetch("/Mine/PointsForClick", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": token
                },
                body: JSON.stringify(2)
            });

            const result = await response.json();

            const indicator = document.createElement("div");
            indicator.style.position = "absolute";
            indicator.style.left = `${e.offsetX}px`;
            indicator.style.top = `${e.offsetY}px`;
            indicator.style.fontSize = "20px";
            indicator.style.fontWeight = "bold";
            indicator.style.pointerEvents = "none";
            indicator.style.opacity = "1";
            indicator.style.transition = "opacity 1s ease-out";

            if (result.success) {
                indicator.textContent = `+${result.points.toFixed(2)}`;
                indicator.style.color = "DeepSkyBlue";

                diamondCount += result.points;
                document.getElementById('diamond-count').textContent = diamondCount.toFixed(2);
            } else {
                indicator.textContent = result.message;
                indicator.style.color = "red";
            }

            document.getElementById("mine").appendChild(indicator);

            setTimeout(() => {
                indicator.style.opacity = "0";
                setTimeout(() => indicator.remove(), 1000);
            }, 1500);
        });

        
        document.getElementById("minecartclick").addEventListener("click", async function (e) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const progressFill = document.querySelector('.progress-fill');

            const response = await fetch("/Mine/BonusPointsForClick", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": token
                },
                body: JSON.stringify(2)
            });

            const result = await response.json();

            const indicator = document.createElement("div");
            indicator.style.position = "absolute";
            indicator.style.left = `${e.offsetX}px`;
            indicator.style.top = `${e.offsetY}px`;
            indicator.style.fontSize = "20px";
            indicator.style.fontWeight = "bold";
            indicator.style.pointerEvents = "none";
            indicator.style.opacity = "1";
            indicator.style.transition = "opacity 1s ease-out";

            if (result.success) {
                progressFill.dataset.current -= 1;
                const percent = Math.floor((progressFill.dataset.current / progressFill.dataset.max) * 100);
                progressFill.style.width = percent + '%';

                indicator.textContent = `+${result.points.toFixed(2)}`;
                indicator.style.color = "DeepSkyBlue";

                diamondCount += result.points;
                document.getElementById('diamond-count').textContent = diamondCount.toFixed(2);
            } else {
                indicator.textContent = result.message;
                indicator.style.color = "red";
            }

            document.getElementById("minecart").appendChild(indicator);

            setTimeout(() => {
                indicator.style.opacity = "0";
                setTimeout(() => indicator.remove(), 1000);
            }, 1500);
        });
    </script>
}
